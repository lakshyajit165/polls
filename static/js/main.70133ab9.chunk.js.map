{"version":3,"sources":["poll.svg","constants/index.js","util/APIUtils.js","util/Colors.js","poll/Poll.js","util/Helpers.js","common/LoadingIndicator.js","poll/PollList.js","poll/NewPoll.js","user/login/Login.js","user/signup/Signup.js","common/NotFound.js","common/ServerError.js","user/profile/Profile.js","common/AppHeader.js","common/PrivateRoute.js","extras/RouteNotFound.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","API_BASE_URL","process","REACT_APP_API_BASE_URL","request","options","headers","Headers","localStorage","getItem","append","defaults","Object","assign","fetch","url","then","response","json","ok","Promise","reject","getAllPolls","page","size","method","getUserCreatedPolls","username","getUserVotedPolls","colors","getAvatarColor","name","substr","hash","i","length","charCodeAt","index","Math","abs","RadioGroup","Group","CompletedOrVotedPollChoice","props","className","round","percentVote","choice","text","isSelected","type","isWinner","style","width","Poll","state","visible","currentPollId","showModal","id","setState","handleOk","e","deletePoll","handleCancel","calculatePercentage","poll","totalVotes","voteCount","selectedChoice","getWinningChoice","choices","reduce","prevChoice","currentChoice","Infinity","getTimeRemaining","difference_ms","Date","expirationDateTime","getTime","seconds","floor","minutes","hours","days","checkIfPollCreatedByCurrentUser","currentLoggedInUser","createdBy","console","log","pollChoices","this","expired","winningChoice","forEach","push","key","value","to","backgroundColor","toUpperCase","dateTimeString","date","monthIndex","getMonth","year","getFullYear","getDate","getHours","getMinutes","formatDateTime","creationDateTime","question","onChange","handleVoteChange","currentVote","disabled","onClick","handleVoteSubmit","fontSize","marginLeft","title","onOk","onCancel","fontFamily","Component","LoadingIndicator","antIcon","spin","indicator","display","textAlign","marginTop","PollList","_isMounted","deleteSinglePoll","res","notification","success","message","description","polls","filter","catch","err","error","totalElements","totalPages","last","currentVotes","isLoading","loadPollList","bind","handleLoadMore","promise","slice","concat","content","Array","fill","nextProps","isAuthenticated","event","pollIndex","target","preventDefault","history","info","voteData","pollId","body","JSON","stringify","castVote","choiceId","status","handleLogout","pollViews","currentUser","withRouter","Option","FormItem","Item","TextArea","PollChoice","validateStatus","help","errorMsg","placeholder","choiceNumber","handleChoiceChange","removeChoice","NewPoll","validateQuestion","questionText","validateChoice","choiceText","pollLength","addChoice","handleSubmit","handleQuestionChange","handlePollDaysChange","handlePollHoursChange","isFormInvalid","pollData","createPoll","map","choiceViews","onSubmit","autoSize","minRows","maxRows","xs","sm","marginRight","defaultValue","from","keys","htmlType","Login","AntWrappedLoginForm","create","LoginForm","onLogin","form","validateFields","values","loginRequest","login","setItem","accessToken","getFieldDecorator","rules","required","prefix","Signup","validateName","validationStatus","validateEmail","email","RegExp","test","validateUsername","validatePassword","password","handleInputChange","validateUsernameAvailability","validateEmailAvailability","validationFun","inputName","inputValue","signupRequest","axios","post","data","smtp_check","format_valid","signup","warning","label","autoComplete","hasFeedback","onBlur","usernameValue","usernameValidation","available","emailValue","emailValidation","NotFound","ServerError","TabPane","Profile","user","loadUserProfile","getUserProfile","notFound","serverError","match","params","dateString","formatDate","joinedAt","defaultActiveKey","animated","tabBarStyle","tab","pollCount","Header","AppHeader","handleMenuClick","onLogout","menuItems","src","pollIcon","alt","ProfileDropdownMenu","mode","selectedKeys","location","pathname","lineHeight","dropdownMenu","Divider","overlay","trigger","getPopupContainer","document","getElementsByClassName","PrivateRoute","component","authenticated","rest","render","RouteNotFound","paddingTop","paddingBottom","Content","App","loadCurrentUser","handleLogin","config","placement","top","duration","redirectTo","notificationType","removeItem","exact","path","Boolean","window","hostname","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.70133ab9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/poll.1bc024be.svg\";","export const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://ec2-13-233-122-120.ap-south-1.compute.amazonaws.com:5000/api';\nexport const ACCESS_TOKEN = 'accessToken';\n\nexport const POLL_LIST_SIZE = 30;\nexport const MAX_CHOICES = 6;\nexport const POLL_QUESTION_MAX_LENGTH = 140;\nexport const POLL_CHOICE_MAX_LENGTH = 40;\n\nexport const NAME_MIN_LENGTH = 4;\nexport const NAME_MAX_LENGTH = 40;\n\nexport const USERNAME_MIN_LENGTH = 3;\nexport const USERNAME_MAX_LENGTH = 15;\n\nexport const EMAIL_MAX_LENGTH = 40;\n\nexport const PASSWORD_MIN_LENGTH = 6;\nexport const PASSWORD_MAX_LENGTH = 20;\n\nexport const APILAYER_APIKEY = 'faa9e626f38daa5e02e1e3f821a624e5';","import { API_BASE_URL, POLL_LIST_SIZE, ACCESS_TOKEN } from '../constants';\n\nconst request = (options) => {\n    const headers = new Headers({\n        'Content-Type': 'application/json',\n    })\n    \n    if(localStorage.getItem(ACCESS_TOKEN)) {\n        headers.append('Authorization', 'Bearer ' + localStorage.getItem(ACCESS_TOKEN))\n    }\n\n    const defaults = {headers: headers};\n    options = Object.assign({}, defaults, options);\n\n    return fetch(options.url, options)\n    .then(response => \n        response.json().then(json => {\n            if(!response.ok) {\n                return Promise.reject(json);\n            }\n            return json;\n        })\n    );\n};\n\nexport function getAllPolls(page, size) {\n    page = page || 0;\n    size = size || POLL_LIST_SIZE;\n\n    return request({\n        url: API_BASE_URL + \"/polls?page=\" + page + \"&size=\" + size,\n        method: 'GET'\n    });\n}\n\nexport function createPoll(pollData) {\n    return request({\n        url: API_BASE_URL + \"/polls\",\n        method: 'POST',\n        body: JSON.stringify(pollData)         \n    });\n}\n\nexport function castVote(voteData) {\n    return request({\n        url: API_BASE_URL + \"/polls/\" + voteData.pollId + \"/votes\",\n        method: 'POST',\n        body: JSON.stringify(voteData)\n    });\n}\n\nexport function login(loginRequest) {\n    return request({\n        url: API_BASE_URL + \"/auth/signin\",\n        method: 'POST',\n        body: JSON.stringify(loginRequest)\n    });\n}\n\nexport function signup(signupRequest) {\n    return request({\n        url: API_BASE_URL + \"/auth/signup\",\n        method: 'POST',\n        body: JSON.stringify(signupRequest)\n    });\n}\n\nexport function checkUsernameAvailability(username) {\n    return request({\n        url: API_BASE_URL + \"/user/checkUsernameAvailability?username=\" + username,\n        method: 'GET'\n    });\n}\n\nexport function checkEmailAvailability(email) {\n    return request({\n        url: API_BASE_URL + \"/user/checkEmailAvailability?email=\" + email,\n        method: 'GET'\n    });\n}\n\n\nexport function getCurrentUser() {\n    if(!localStorage.getItem(ACCESS_TOKEN)) {\n        return Promise.reject(\"No access token set.\");\n    }\n\n    return request({\n        url: API_BASE_URL + \"/user/me\",\n        method: 'GET'\n    });\n}\n\nexport function getUserProfile(username) {\n    return request({\n        url: API_BASE_URL + \"/users/\" + username,\n        method: 'GET'\n    });\n}\n\nexport function getUserCreatedPolls(username, page, size) {\n    page = page || 0;\n    size = size || POLL_LIST_SIZE;\n\n    return request({\n        url: API_BASE_URL + \"/users/\" + username + \"/polls?page=\" + page + \"&size=\" + size,\n        method: 'GET'\n    });\n}\n\nexport function getUserVotedPolls(username, page, size) {\n    page = page || 0;\n    size = size || POLL_LIST_SIZE;\n\n    return request({\n        url: API_BASE_URL + \"/users/\" + username + \"/votes?page=\" + page + \"&size=\" + size,\n        method: 'GET'\n    });\n}\n\nexport function deletePoll(id) {\n\n    return request({\n        url: API_BASE_URL + \"/polls/\" + id,\n        method: 'DELETE'\n    });\n}","const colors = [\n    '#F44336', '#e91e63', '#9c27b0', '#673ab7',\n    '#ff9800', '#ff5722', '#795548', '#607d8b',\n    '#3f51b5', '#2196F3', '#00bcd4', '#009688',\n    '#2196F3', '#32c787', '#00BCD4', '#ff5652',\n    '#ffc107', '#ff85af', '#FF9800', '#39bbb0',\n    '#4CAF50', '#ffeb3b', '#ffc107',\n];\n\nexport function getAvatarColor(name) {\n    name = name.substr(0, 6);\n\n    var hash = 0;\n    for (var i = 0; i < name.length; i++) {\n        hash = 31 * hash + name.charCodeAt(i);\n    }\n    var index = Math.abs(hash % colors.length);\n    return colors[index];\n}","import React, { Component } from 'react';\nimport './Poll.css';\nimport { Avatar, Icon, Modal } from 'antd';\nimport { Link } from 'react-router-dom';\nimport { getAvatarColor } from '../util/Colors';\nimport { formatDateTime } from '../util/Helpers';\n\nimport { Radio, Button } from 'antd';\nconst RadioGroup = Radio.Group;\n\nclass Poll extends Component {\n\n    state = { visible: false, currentPollId: 0 };\n\n    showModal = (id) => {\n        // console.log(id);\n        // console.log(typeof(id));\n        this.setState({\n          visible: true,\n          currentPollId: id\n        });\n        \n      };\n    \n    handleOk = e => {\n        // console.log(e);\n        \n        this.props.deletePoll(this.state.currentPollId);\n        \n        this.setState({\n            visible: false,\n          });\n\n       \n        \n      \n        \n    };\n    \n      handleCancel = e => {\n        // console.log(e);\n        this.setState({\n          visible: false,\n        });\n\n       \n      };\n\n\n\n\n    calculatePercentage = (choice) => {\n        if(this.props.poll.totalVotes === 0) {\n            return 0;\n        }\n        return (choice.voteCount*100)/(this.props.poll.totalVotes);\n    };\n\n    isSelected = (choice) => {\n        return this.props.poll.selectedChoice === choice.id;\n    }\n\n    getWinningChoice = () => {\n        return this.props.poll.choices.reduce((prevChoice, currentChoice) => \n            currentChoice.voteCount > prevChoice.voteCount ? currentChoice : prevChoice, \n            {voteCount: -Infinity}\n        );\n    }\n\n    getTimeRemaining = (poll) => {\n        const expirationTime = new Date(poll.expirationDateTime).getTime();\n        const currentTime = new Date().getTime();\n    \n        var difference_ms = expirationTime - currentTime;\n        var seconds = Math.floor( (difference_ms/1000) % 60 );\n        var minutes = Math.floor( (difference_ms/1000/60) % 60 );\n        var hours = Math.floor( (difference_ms/(1000*60*60)) % 24 );\n        var days = Math.floor( difference_ms/(1000*60*60*24) );\n    \n        let timeRemaining;\n    \n        if(days > 0) {\n            timeRemaining = days + \" days left\";\n        } else if (hours > 0) {\n            timeRemaining = hours + \" hours left\";\n        } else if (minutes > 0) {\n            timeRemaining = minutes + \" minutes left\";\n        } else if(seconds > 0) {\n            timeRemaining = seconds + \" seconds left\";\n        } else {\n            timeRemaining = \"less than a second left\";\n        }\n        \n        return timeRemaining;\n    }\n\n    checkIfPollCreatedByCurrentUser = () => {\n        if(this.props.currentLoggedInUser)\n            return this.props.poll.createdBy.username === this.props.currentLoggedInUser.username;\n    }\n\n    deletePoll = () => {\n        console.log(this.props.poll.createdBy.username);\n        console.log(this.props.currentLoggedInUser);\n        \n    }\n\n    render() {\n        const pollChoices = [];\n        if(this.props.poll.selectedChoice || this.props.poll.expired) {\n            const winningChoice = this.props.poll.expired ? this.getWinningChoice() : null;\n\n            this.props.poll.choices.forEach(choice => {\n                pollChoices.push(<CompletedOrVotedPollChoice \n                    key={choice.id} \n                    choice={choice}\n                    isWinner={winningChoice && choice.id === winningChoice.id}\n                    isSelected={this.isSelected(choice)}\n                    percentVote={this.calculatePercentage(choice)} \n                />);\n            });                \n        } else {\n            this.props.poll.choices.forEach(choice => {\n                pollChoices.push(<Radio className=\"poll-choice-radio\" key={choice.id} value={choice.id}>{choice.text}</Radio>)\n            })    \n        }        \n        return (\n            <div className=\"poll-content\">\n                <div className=\"poll-header\">\n                    <div className=\"poll-creator-info\">\n                        <Link className=\"creator-link\" to={`/users/${this.props.poll.createdBy.username}`}>\n                            <Avatar className=\"poll-creator-avatar\" \n                                style={{ backgroundColor: getAvatarColor(this.props.poll.createdBy.name)}} >\n                                {this.props.poll.createdBy.name[0].toUpperCase()}\n                            </Avatar>\n                            <span className=\"poll-creator-name\">\n                                {this.props.poll.createdBy.name}\n                            </span>\n                            <span className=\"poll-creator-username\">\n                                @{this.props.poll.createdBy.username}\n                            </span>\n                            <span className=\"poll-creation-date\">\n                                {formatDateTime(this.props.poll.creationDateTime)}\n                            </span>\n                            \n                        </Link>\n                        \n                    </div>\n                    <div className=\"poll-question\">\n                        {this.props.poll.question}\n                    </div>\n                </div>\n                <div className=\"poll-choices\">\n                    <RadioGroup \n                        className=\"poll-choice-radio-group\" \n                        onChange={this.props.handleVoteChange} \n                        value={this.props.currentVote}>\n                        { pollChoices }\n                    </RadioGroup>\n                </div>\n                <div className=\"poll-footer\">\n                    { \n                        !(this.props.poll.selectedChoice || this.props.poll.expired) ?\n                        (<Button className=\"vote-button\" disabled={!this.props.currentVote} onClick={this.props.handleVoteSubmit}>Vote</Button>) : null \n                    }\n                    <span className=\"total-votes\">{this.props.poll.totalVotes} votes</span>\n                    <span className=\"separator\">•</span>\n                    <span className=\"time-left\">\n                        {\n                            this.props.poll.expired ? \"Final results\" :\n                            this.getTimeRemaining(this.props.poll)\n                        }\n                    </span>\n                    <span className=\"poll-delete-btn\" onClick={() => this.showModal(this.props.poll.id)}>\n                        {\n                            this.checkIfPollCreatedByCurrentUser() ? \n                            (<Icon type=\"delete\" style={{ fontSize: '25px', marginLeft: '10px'}} />)\n                            :\n                            (<div></div>)\n                        }\n                                \n                            </span>\n                </div>\n                <Modal\n                    title=\"Delete Poll\"\n                    visible={this.state.visible}\n                    onOk={this.handleOk}\n                    onCancel={this.handleCancel}\n                    >\n                    <h2 style={{ fontFamily: 'Questrial'}}>Are you sure you want to delete this poll?</h2>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nfunction CompletedOrVotedPollChoice(props) {\n    return (\n        <div className=\"cv-poll-choice\">\n            <span className=\"cv-poll-choice-details\">\n                <span className=\"cv-choice-percentage\">\n                    {Math.round(props.percentVote * 100) / 100}%\n                </span>            \n                <span className=\"cv-choice-text\">\n                    {props.choice.text}\n                </span>\n                {\n                    props.isSelected ? (\n                    <Icon\n                        className=\"selected-choice-icon\"\n                        type=\"check-circle-o\"\n                    /> ): null\n                }    \n            </span>\n            <span className={props.isWinner ? 'cv-choice-percent-chart winner': 'cv-choice-percent-chart'} \n                style={{width: props.percentVote + '%' }}>\n            </span>\n        </div>\n    );\n}\n\n\nexport default Poll;","export function formatDate(dateString) {\n    const date = new Date(dateString);\n\n    const monthNames = [\n      \"January\", \"February\", \"March\",\n      \"April\", \"May\", \"June\", \"July\",\n      \"August\", \"September\", \"October\",\n      \"November\", \"December\"\n    ];\n  \n    const monthIndex = date.getMonth();\n    const year = date.getFullYear();\n  \n    return monthNames[monthIndex] + ' ' + year;\n}\n  \nexport function formatDateTime(dateTimeString) {\n  const date = new Date(dateTimeString);\n\n  const monthNames = [\n    \"Jan\", \"Feb\", \"Mar\", \"Apr\",\n    \"May\", \"Jun\", \"Jul\", \"Aug\", \n    \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n  ];\n\n  const monthIndex = date.getMonth();\n  const year = date.getFullYear();\n\n  return date.getDate() + ' ' + monthNames[monthIndex] + ' ' + year + ' - ' + date.getHours() + ':' + date.getMinutes();\n}  \n","import React from 'react';\nimport { Spin, Icon } from 'antd';\n\nexport default function LoadingIndicator(props) {\n    const antIcon = <Icon type=\"loading-3-quarters\" style={{ fontSize: 30 }} spin />;\n    return (\n        <Spin indicator={antIcon} style = {{display: 'block', textAlign: 'center', marginTop: 30}} />\n    );\n}","import React, { Component } from 'react';\nimport { getAllPolls, getUserCreatedPolls, getUserVotedPolls } from '../util/APIUtils';\nimport Poll from './Poll';\nimport { castVote, deletePoll } from '../util/APIUtils';\nimport LoadingIndicator  from '../common/LoadingIndicator';\nimport { Button, Icon, notification } from 'antd';\nimport { POLL_LIST_SIZE } from '../constants';\nimport { withRouter } from 'react-router-dom';\nimport './PollList.css';\n\nclass PollList extends Component {\n\n    _isMounted = false;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            polls: [],\n            page: 0,\n            size: 10,\n            totalElements: 0,\n            totalPages: 0,\n            last: true,\n            currentVotes: [],\n            isLoading: false\n        };\n        this.loadPollList = this.loadPollList.bind(this);\n        this.handleLoadMore = this.handleLoadMore.bind(this);\n    }\n\n    loadPollList(page = 0, size = POLL_LIST_SIZE) {\n        let promise;\n        if(this.props.username) {\n            if(this.props.type === 'USER_CREATED_POLLS') {\n                promise = getUserCreatedPolls(this.props.username, page, size);\n            } else if (this.props.type === 'USER_VOTED_POLLS') {\n                promise = getUserVotedPolls(this.props.username, page, size);                               \n            }\n        } else {\n            promise = getAllPolls(page, size);\n        }\n\n        if(!promise) {\n            return;\n        }\n\n        this.setState({\n            isLoading: true\n        });\n\n        promise            \n        .then(response => {\n            const polls = this.state.polls.slice();\n            const currentVotes = this.state.currentVotes.slice();\n\n            if(this._isMounted){\n                this.setState({\n                    polls: polls.concat(response.content),\n                    page: response.page,\n                    size: response.size,\n                    totalElements: response.totalElements,\n                    totalPages: response.totalPages,\n                    last: response.last,\n                    currentVotes: currentVotes.concat(Array(response.content.length).fill(null)),\n                    isLoading: false\n                })\n            }\n           \n        }).catch(error => {\n            this.setState({\n                isLoading: false\n            })\n        });  \n        \n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n        \n            this.loadPollList();\n        \n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    componentDidUpdate(nextProps) {\n        if(this.props.isAuthenticated !== nextProps.isAuthenticated) {\n            // Reset State\n            this.setState({\n                polls: [],\n                page: 0,\n                size: 10,\n                totalElements: 0,\n                totalPages: 0,\n                last: true,\n                currentVotes: [],\n                isLoading: false\n            });    \n            this.loadPollList();\n        }\n    }\n\n\n    handleLoadMore() {\n        this.loadPollList(this.state.page + 1);\n    }\n\n    handleVoteChange(event, pollIndex) {\n        const currentVotes = this.state.currentVotes.slice();\n        currentVotes[pollIndex] = event.target.value;\n\n        this.setState({\n            currentVotes: currentVotes\n        });\n    }\n\n\n    handleVoteSubmit(event, pollIndex) {\n        event.preventDefault();\n        if(!this.props.isAuthenticated) {\n            this.props.history.push(\"/login\");\n            notification.info({\n                message: 'Polling App',\n                description: \"Please login to vote.\",          \n            });\n            return;\n        }\n\n        const poll = this.state.polls[pollIndex];\n        const selectedChoice = this.state.currentVotes[pollIndex];\n\n        const voteData = {\n            pollId: poll.id,\n            choiceId: selectedChoice\n        };\n\n        castVote(voteData)\n        .then(response => {\n            const polls = this.state.polls.slice();\n            polls[pollIndex] = response;\n            this.setState({\n                polls: polls\n            });        \n        }).catch(error => {\n            if(error.status === 401) {\n                this.props.handleLogout('/login', 'error', 'You have been logged out. Please login to vote');    \n            } else {\n                notification.error({\n                    message: 'Polling App',\n                    description: error.message || 'Sorry! Something went wrong. Please try again!'\n                });                \n            }\n        });\n    }\n\n    // delete a single poll\n    deleteSinglePoll = (id) => {\n\n        deletePoll(id)\n        .then(res => {\n            console.log(res);\n            notification.success({\n                message: 'Polling App',\n                description: \"Poll deleted!\",          \n            });\n\n            // console.log(this.state);\n\n            this.setState({\n                polls: this.state.polls.filter((poll) => poll.id !== id)\n            });\n\n           \n            \n        }).catch(err => {\n            console.log(err);\n            notification.error({\n                message: 'Polling App',\n                description: \"An error occurred!\",          \n            });\n            // this.loadPollList();\n        });\n       \n    }\n\n    render() {\n        const pollViews = [];\n        this.state.polls.forEach((poll, pollIndex) => {\n            pollViews.push(\n            \n            <Poll \n                key={poll.id} \n                poll={poll}\n                currentVote={this.state.currentVotes[pollIndex]} \n                handleVoteChange={(event) => this.handleVoteChange(event, pollIndex)}\n                handleVoteSubmit={(event) => this.handleVoteSubmit(event, pollIndex)} \n                currentLoggedInUser={this.props.currentUser}\n                deletePoll={this.deleteSinglePoll}\n                history={this.props.history}\n            />\n            \n            )            \n        });\n\n        return (\n            <div className=\"polls-container\">\n                {pollViews}\n                {\n                    !this.state.isLoading && this.state.polls.length === 0 ? (\n                        <div className=\"no-polls-found\">\n                            <span>No Polls Found.</span>\n                        </div>    \n                    ): null\n                }  \n                {\n                    !this.state.isLoading && !this.state.last ? (\n                        <div className=\"load-more-polls\"> \n                            <Button type=\"dashed\" onClick={this.handleLoadMore} disabled={this.state.isLoading}>\n                                <Icon type=\"plus\" /> Load more\n                            </Button>\n                        </div>): null\n                }              \n                {\n                    this.state.isLoading ? \n                    <LoadingIndicator />: null                     \n                }\n            </div>\n        );\n    }\n}\n\nexport default withRouter(PollList);","import React, { Component } from 'react';\nimport { createPoll } from '../util/APIUtils';\nimport { MAX_CHOICES, POLL_QUESTION_MAX_LENGTH, POLL_CHOICE_MAX_LENGTH } from '../constants';\nimport './NewPoll.css';  \nimport { Form, Input, Button, Icon, Select, Col, notification } from 'antd';\nconst Option = Select.Option;\nconst FormItem = Form.Item;\nconst { TextArea } = Input\n\nclass NewPoll extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            question: {\n                text: ''\n            },\n            choices: [{\n                text: ''\n            }, {\n                text: ''\n            }],\n            pollLength: {\n                days: 1,\n                hours: 0\n            }\n        };\n        this.addChoice = this.addChoice.bind(this);\n        this.removeChoice = this.removeChoice.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleQuestionChange = this.handleQuestionChange.bind(this);\n        this.handleChoiceChange = this.handleChoiceChange.bind(this);\n        this.handlePollDaysChange = this.handlePollDaysChange.bind(this);\n        this.handlePollHoursChange = this.handlePollHoursChange.bind(this);\n        this.isFormInvalid = this.isFormInvalid.bind(this);\n    }\n\n    addChoice(event) {\n        const choices = this.state.choices.slice();        \n        this.setState({\n            choices: choices.concat([{\n                text: ''\n            }])\n        });\n    }\n\n    removeChoice(choiceNumber) {\n        const choices = this.state.choices.slice();\n        this.setState({\n            choices: [...choices.slice(0, choiceNumber), ...choices.slice(choiceNumber+1)]\n        });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        const pollData = {\n            question: this.state.question.text,\n            choices: this.state.choices.map(choice => {\n                return {text: choice.text} \n            }),\n            pollLength: this.state.pollLength\n        };\n\n        createPoll(pollData)\n        .then(response => {\n            this.props.history.push(\"/\");\n        }).catch(error => {\n            if(error.status === 401) {\n                this.props.handleLogout('/login', 'error', 'You have been logged out. Please login create poll.');    \n            } else {\n                notification.error({\n                    message: 'Polling App',\n                    description: error.message || 'Sorry! Something went wrong. Please try again!'\n                });              \n            }\n        });\n    }\n\n    validateQuestion = (questionText) => {\n        if(questionText.length === 0) {\n            return {\n                validateStatus: 'error',\n                errorMsg: 'Please enter your question!'\n            }\n        } else if (questionText.length > POLL_QUESTION_MAX_LENGTH) {\n            return {\n                validateStatus: 'error',\n                errorMsg: `Question is too long (Maximum ${POLL_QUESTION_MAX_LENGTH} characters allowed)`\n            }    \n        } else {\n            return {\n                validateStatus: 'success',\n                errorMsg: null\n            }\n        }\n    }\n\n    handleQuestionChange(event) {\n        const value = event.target.value;\n        this.setState({\n            question: {\n                text: value,\n                ...this.validateQuestion(value)\n            }\n        });\n    }\n\n    validateChoice = (choiceText) => {\n        if(choiceText.length === 0) {\n            return {\n                validateStatus: 'error',\n                errorMsg: 'Please enter a choice!'\n            }\n        } else if (choiceText.length > POLL_CHOICE_MAX_LENGTH) {\n            return {\n                validateStatus: 'error',\n                errorMsg: `Choice is too long (Maximum ${POLL_CHOICE_MAX_LENGTH} characters allowed)`\n            }    \n        } else {\n            return {\n                validateStatus: 'success',\n                errorMsg: null\n            }\n        }\n    }\n\n    handleChoiceChange(event, index) {\n        const choices = this.state.choices.slice();\n        const value = event.target.value;\n\n        choices[index] = {\n            text: value,\n            ...this.validateChoice(value)\n        }\n\n        this.setState({\n            choices: choices\n        });\n    }\n\n\n    handlePollDaysChange(value) {\n        const pollLength = Object.assign(this.state.pollLength, {days: value});\n        this.setState({\n            pollLength: pollLength\n        });\n    }\n\n    handlePollHoursChange(value) {\n        const pollLength = Object.assign(this.state.pollLength, {hours: value});\n        this.setState({\n            pollLength: pollLength\n        });\n    }\n\n    isFormInvalid() {\n        if(this.state.question.validateStatus !== 'success') {\n            return true;\n        }\n    \n        for(let i = 0; i < this.state.choices.length; i++) {\n            const choice = this.state.choices[i];            \n            if(choice.validateStatus !== 'success') {\n                return true;\n            }\n        }\n    }\n\n    render() {\n        const choiceViews = [];\n        this.state.choices.forEach((choice, index) => {\n            choiceViews.push(<PollChoice key={index} choice={choice} choiceNumber={index} removeChoice={this.removeChoice} handleChoiceChange={this.handleChoiceChange}/>);\n        });\n\n        return (\n            <div className=\"new-poll-container\">\n                <h1 className=\"page-title\">Create Poll</h1>\n                <div className=\"new-poll-content\">\n                    <Form onSubmit={this.handleSubmit} className=\"create-poll-form\">\n                        <FormItem validateStatus={this.state.question.validateStatus}\n                            help={this.state.question.errorMsg} className=\"poll-form-row\">\n                        <TextArea \n                            placeholder=\"Enter your question\"\n                            style = {{ fontSize: '16px' }} \n                            autoSize={{ minRows: 3, maxRows: 6 }} \n                            name = \"question\"\n                            value = {this.state.question.text}\n                            onChange = {this.handleQuestionChange} />\n                        </FormItem>\n                        {choiceViews}\n                        <FormItem className=\"poll-form-row\">\n                            <Button type=\"dashed\" onClick={this.addChoice} disabled={this.state.choices.length === MAX_CHOICES}>\n                                <Icon type=\"plus\" /> Add a choice\n                            </Button>\n                        </FormItem>\n                        <FormItem className=\"poll-form-row\">\n                            <Col xs={24} sm={4}>\n                                Poll length: \n                            </Col>\n                            <Col xs={24} sm={20}>    \n                                <span style = {{ marginRight: '18px' }}>\n                                    <Select \n                                        name=\"days\"\n                                        defaultValue=\"1\" \n                                        onChange={this.handlePollDaysChange}\n                                        value={this.state.pollLength.days}\n                                        style={{ width: 60 }} >\n                                        {\n                                            Array.from(Array(8).keys()).map(i => \n                                                <Option key={i}>{i}</Option>                                        \n                                            )\n                                        }\n                                    </Select> &nbsp;Days\n                                </span>\n                                <span>\n                                    <Select \n                                        name=\"hours\"\n                                        defaultValue=\"0\" \n                                        onChange={this.handlePollHoursChange}\n                                        value={this.state.pollLength.hours}\n                                        style={{ width: 60 }} >\n                                        {\n                                            Array.from(Array(24).keys()).map(i => \n                                                <Option key={i}>{i}</Option>                                        \n                                            )\n                                        }\n                                    </Select> &nbsp;Hours\n                                </span>\n                            </Col>\n                        </FormItem>\n                        <FormItem className=\"poll-form-row\">\n                            <Button type=\"primary\" \n                                htmlType=\"submit\" \n                                size=\"large\" \n                                disabled={this.isFormInvalid()}\n                                className=\"create-poll-form-button\">Create Poll</Button>\n                        </FormItem>\n                    </Form>\n                </div>    \n            </div>\n        );\n    }\n}\n\nfunction PollChoice(props) {\n    return (\n        <FormItem validateStatus={props.choice.validateStatus}\n        help={props.choice.errorMsg} className=\"poll-form-row\">\n            <Input \n                placeholder = {'Choice ' + (props.choiceNumber + 1)}\n                size=\"large\"\n                value={props.choice.text} \n                className={ props.choiceNumber > 1 ? \"optional-choice\": null}\n                onChange={(event) => props.handleChoiceChange(event, props.choiceNumber)} />\n\n            {\n                props.choiceNumber > 1 ? (\n                <Icon\n                    className=\"dynamic-delete-button\"\n                    type=\"close\"\n                    disabled={props.choiceNumber <= 1}\n                    onClick={() => props.removeChoice(props.choiceNumber)}\n                /> ): null\n            }    \n        </FormItem>\n    );\n}\n\n\nexport default NewPoll;","import React, { Component } from 'react';\nimport { login } from '../../util/APIUtils';\nimport './Login.css';\nimport { Link } from 'react-router-dom';\nimport { ACCESS_TOKEN } from '../../constants';\n\n\nimport { Form, Input, Button, Icon, notification } from 'antd';\nconst FormItem = Form.Item;\n\nclass Login extends Component {\n    render() {\n        const AntWrappedLoginForm = Form.create()(LoginForm)\n        return (\n            <div className=\"login-container\">\n                <h1 className=\"page-title\">Login</h1>\n                <div className=\"login-content\">\n                    <AntWrappedLoginForm onLogin={this.props.onLogin} />\n                </div>\n            </div>\n        );\n    }\n}\n\nclass LoginForm extends Component {\n\n    \n    constructor(props) {\n        super(props);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        \n       \n    }\n\n\n    handleSubmit(event) {\n        event.preventDefault();   \n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                const loginRequest = Object.assign({}, values);\n                login(loginRequest)\n                .then(response => {\n                    localStorage.setItem(ACCESS_TOKEN, response.accessToken);\n                    this.props.onLogin();\n                }).catch(error => {\n                    if(error.status === 401) {\n                        notification.error({\n                            message: 'Polling App',\n                            description: 'Your Username or Password is incorrect. Please try again!'\n                        });                    \n                    } else {\n                        notification.error({\n                            message: 'Polling App',\n                            description: error.message || 'Sorry! Something went wrong. Please try again!'\n                        });                                            \n                    }\n                });\n            }\n        });\n    }\n\n    render() {\n        const { getFieldDecorator } = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n                <FormItem>\n                    {getFieldDecorator('usernameOrEmail', {\n                        rules: [{ required: true, message: 'Please input your username or email!' }],\n                    })(\n                    <Input \n                        prefix={<Icon type=\"user\" />}\n                        size=\"large\"\n                        name=\"usernameOrEmail\" \n                        placeholder=\"Username or Email\" />    \n                    )}\n                </FormItem>\n                <FormItem>\n                {getFieldDecorator('password', {\n                    rules: [{ required: true, message: 'Please input your Password!' }],\n                })(\n                    <Input \n                        prefix={<Icon type=\"lock\" />}\n                        size=\"large\"\n                        name=\"password\" \n                        type=\"password\" \n                        placeholder=\"Password\"  />                        \n                )}\n                </FormItem>\n                <FormItem>\n                    <Button type=\"primary\" htmlType=\"submit\" size=\"large\" className=\"login-form-button\">Login</Button>\n                    Or <Link to=\"/signup\">register now!</Link>\n                </FormItem>\n            </Form>\n        );\n    }\n}\n\n\nexport default Login;","import React, { Component } from 'react';\nimport { signup, checkUsernameAvailability, checkEmailAvailability } from '../../util/APIUtils';\nimport './Signup.css';\nimport { Link } from 'react-router-dom';\nimport { \n    NAME_MIN_LENGTH, NAME_MAX_LENGTH, \n    USERNAME_MIN_LENGTH, USERNAME_MAX_LENGTH,\n    EMAIL_MAX_LENGTH,\n    PASSWORD_MIN_LENGTH, PASSWORD_MAX_LENGTH,\n    APILAYER_APIKEY\n} from '../../constants';\n\nimport axios from 'axios';\n\nimport { Form, Input, Button, notification } from 'antd';\nconst FormItem = Form.Item;\n\nclass Signup extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: {\n                value: ''\n            },\n            username: {\n                value: ''\n            },\n            email: {\n                value: ''\n            },\n            password: {\n                value: ''\n            }\n        }\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.validateUsernameAvailability = this.validateUsernameAvailability.bind(this);\n        this.validateEmailAvailability = this.validateEmailAvailability.bind(this);\n        this.isFormInvalid = this.isFormInvalid.bind(this);\n    }\n\n    handleInputChange(event, validationFun) {\n        const target = event.target;\n        const inputName = target.name;        \n        const inputValue = target.value;\n\n        this.setState({\n            [inputName] : {\n                value: inputValue,\n                ...validationFun(inputValue)\n            }\n        });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        \n        const signupRequest = {\n            name: this.state.name.value,\n            email: this.state.email.value,\n            username: this.state.username.value,\n            password: this.state.password.value\n        };\n\n        // check if the email is valid using APILayer API\n\n        axios.post(`http://apilayer.net/api/check?access_key=${APILAYER_APIKEY}&email=${this.state.email.value}&smtp=1&format=1`)\n        .then(res => {\n\n            // api call is made, validate response\n            if(res.data.smtp_check === true && res.data.format_valid === true){\n\n                signup(signupRequest)\n                .then(response => {\n                    notification.success({\n                        message: 'Polling App',\n                        description: \"Thank you! You're successfully registered. Please Login to continue!\",\n                    });          \n                    this.props.history.push(\"/login\");\n                }).catch(error => {\n                    notification.error({\n                        message: 'Polling App',\n                        description: error.message || 'Sorry! Something went wrong. Please try again!'\n                    });\n            });\n            }else{\n                notification.warning({\n                    message: 'Polling App',\n                    description: \"Oops! Please enter a valid email address!\",\n                });   \n            }\n        })\n        .catch(error => {\n            notification.error({\n                message: 'Polling App',\n                description: error.message || 'Uh-Oh! Could not validate email. Please try again!'\n            });\n        });\n\n        \n    }\n\n    isFormInvalid() {\n        return !(this.state.name.validateStatus === 'success' &&\n            this.state.username.validateStatus === 'success' &&\n            this.state.email.validateStatus === 'success' &&\n            this.state.password.validateStatus === 'success'\n        );\n    }\n\n    render() {\n        return (\n            <div className=\"signup-container\">\n                <h1 className=\"page-title\">Sign Up</h1>\n                <div className=\"signup-content\">\n                    <Form onSubmit={this.handleSubmit} className=\"signup-form\">\n                        <FormItem \n                            label=\"Full Name\"\n                            validateStatus={this.state.name.validateStatus}\n                            help={this.state.name.errorMsg}>\n                            <Input \n                                size=\"large\"\n                                name=\"name\"\n                                autoComplete=\"off\"\n                                placeholder=\"Your full name\"\n                                value={this.state.name.value} \n                                onChange={(event) => this.handleInputChange(event, this.validateName)} />    \n                        </FormItem>\n                        <FormItem label=\"Username\"\n                            hasFeedback\n                            validateStatus={this.state.username.validateStatus}\n                            help={this.state.username.errorMsg}>\n                            <Input \n                                size=\"large\"\n                                name=\"username\" \n                                autoComplete=\"off\"\n                                placeholder=\"A unique username\"\n                                value={this.state.username.value} \n                                onBlur={this.validateUsernameAvailability}\n                                onChange={(event) => this.handleInputChange(event, this.validateUsername)} />    \n                        </FormItem>\n                        <FormItem \n                            label=\"Email\"\n                            hasFeedback\n                            validateStatus={this.state.email.validateStatus}\n                            help={this.state.email.errorMsg}>\n                            <Input \n                                size=\"large\"\n                                name=\"email\" \n                                type=\"email\" \n                                autoComplete=\"off\"\n                                placeholder=\"Your email\"\n                                value={this.state.email.value} \n                                onBlur={this.validateEmailAvailability}\n                                onChange={(event) => this.handleInputChange(event, this.validateEmail)} />    \n                        </FormItem>\n                        <FormItem \n                            label=\"Password\"\n                            validateStatus={this.state.password.validateStatus}\n                            help={this.state.password.errorMsg}>\n                            <Input \n                                size=\"large\"\n                                name=\"password\" \n                                type=\"password\"\n                                autoComplete=\"off\"\n                                placeholder=\"A password between 6 to 20 characters\" \n                                value={this.state.password.value} \n                                onChange={(event) => this.handleInputChange(event, this.validatePassword)} />    \n                        </FormItem>\n                        <FormItem>\n                            <Button type=\"primary\" \n                                htmlType=\"submit\" \n                                size=\"large\" \n                                className=\"signup-form-button\"\n                                disabled={this.isFormInvalid()}>Sign up</Button>\n                            Already registed? <Link to=\"/login\">Login now!</Link>\n                        </FormItem>\n                    </Form>\n                </div>\n            </div>\n        );\n    }\n\n    // Validation Functions\n\n    validateName = (name) => {\n        if(name.length < NAME_MIN_LENGTH) {\n            return {\n                validateStatus: 'error',\n                errorMsg: `Name is too short (Minimum ${NAME_MIN_LENGTH} characters needed.)`\n            }\n        } else if (name.length > NAME_MAX_LENGTH) {\n            return {\n                validationStatus: 'error',\n                errorMsg: `Name is too long (Maximum ${NAME_MAX_LENGTH} characters allowed.)`\n            }\n        } else {\n            return {\n                validateStatus: 'success',\n                errorMsg: null,\n              };            \n        }\n    }\n\n    validateEmail = (email) => {\n        if(!email) {\n            return {\n                validateStatus: 'error',\n                errorMsg: 'Email may not be empty'                \n            }\n        }\n\n        const EMAIL_REGEX = RegExp('[^@ ]+@[^@ ]+\\\\.[^@ ]+');\n        if(!EMAIL_REGEX.test(email)) {\n            return {\n                validateStatus: 'error',\n                errorMsg: 'Email not valid'\n            }\n        }\n\n        if(email.length > EMAIL_MAX_LENGTH) {\n            return {\n                validateStatus: 'error',\n                errorMsg: `Email is too long (Maximum ${EMAIL_MAX_LENGTH} characters allowed)`\n            }\n        }\n\n        return {\n            validateStatus: null,\n            errorMsg: null\n        }\n    }\n\n    validateUsername = (username) => {\n        if(username.length < USERNAME_MIN_LENGTH) {\n            return {\n                validateStatus: 'error',\n                errorMsg: `Username is too short (Minimum ${USERNAME_MIN_LENGTH} characters needed.)`\n            }\n        } else if (username.length > USERNAME_MAX_LENGTH) {\n            return {\n                validationStatus: 'error',\n                errorMsg: `Username is too long (Maximum ${USERNAME_MAX_LENGTH} characters allowed.)`\n            }\n        } else {\n            return {\n                validateStatus: null,\n                errorMsg: null\n            }\n        }\n    }\n\n    validateUsernameAvailability() {\n        // First check for client side errors in username\n        const usernameValue = this.state.username.value;\n        const usernameValidation = this.validateUsername(usernameValue);\n\n        if(usernameValidation.validateStatus === 'error') {\n            this.setState({\n                username: {\n                    value: usernameValue,\n                    ...usernameValidation\n                }\n            });\n            return;\n        }\n\n        this.setState({\n            username: {\n                value: usernameValue,\n                validateStatus: 'validating',\n                errorMsg: null\n            }\n        });\n\n        checkUsernameAvailability(usernameValue)\n        .then(response => {\n            if(response.available) {\n                this.setState({\n                    username: {\n                        value: usernameValue,\n                        validateStatus: 'success',\n                        errorMsg: null\n                    }\n                });\n            } else {\n                this.setState({\n                    username: {\n                        value: usernameValue,\n                        validateStatus: 'error',\n                        errorMsg: 'This username is already taken'\n                    }\n                });\n            }\n        }).catch(error => {\n            // Marking validateStatus as success, Form will be recchecked at server\n            this.setState({\n                username: {\n                    value: usernameValue,\n                    validateStatus: 'success',\n                    errorMsg: null\n                }\n            });\n        });\n    }\n\n    validateEmailAvailability() {\n        // First check for client side errors in email\n        const emailValue = this.state.email.value;\n        const emailValidation = this.validateEmail(emailValue);\n\n        if(emailValidation.validateStatus === 'error') {\n            this.setState({\n                email: {\n                    value: emailValue,\n                    ...emailValidation\n                }\n            });    \n            return;\n        }\n\n        this.setState({\n            email: {\n                value: emailValue,\n                validateStatus: 'validating',\n                errorMsg: null\n            }\n        });\n\n        checkEmailAvailability(emailValue)\n        .then(response => {\n            if(response.available) {\n                this.setState({\n                    email: {\n                        value: emailValue,\n                        validateStatus: 'success',\n                        errorMsg: null\n                    }\n                });\n            } else {\n                this.setState({\n                    email: {\n                        value: emailValue,\n                        validateStatus: 'error',\n                        errorMsg: 'This Email is already registered'\n                    }\n                });\n            }\n        }).catch(error => {\n            // Marking validateStatus as success, Form will be recchecked at server\n            this.setState({\n                email: {\n                    value: emailValue,\n                    validateStatus: 'success',\n                    errorMsg: null\n                }\n            });\n        });\n    }\n\n    validatePassword = (password) => {\n        if(password.length < PASSWORD_MIN_LENGTH) {\n            return {\n                validateStatus: 'error',\n                errorMsg: `Password is too short (Minimum ${PASSWORD_MIN_LENGTH} characters needed.)`\n            }\n        } else if (password.length > PASSWORD_MAX_LENGTH) {\n            return {\n                validationStatus: 'error',\n                errorMsg: `Password is too long (Maximum ${PASSWORD_MAX_LENGTH} characters allowed.)`\n            }\n        } else {\n            return {\n                validateStatus: 'success',\n                errorMsg: null,\n            };            \n        }\n    }\n\n}\n\nexport default Signup;","import React, { Component } from 'react';\nimport './NotFound.css';\nimport { Link } from 'react-router-dom';\nimport { Button } from 'antd';\n\nclass NotFound extends Component {\n    render() {\n        return (\n            <div className=\"page-not-found\">\n                <h1 className=\"title\">\n                    404\n                </h1>\n                <div className=\"desc\">\n                    The Page you're looking for was not found.\n                </div>\n                <Link to=\"/\"><Button className=\"go-back-btn\" type=\"primary\" size=\"large\">Go Back</Button></Link>\n            </div>\n        );\n    }\n}\n\nexport default NotFound;","import React, { Component } from 'react';\nimport './ServerError.css';\nimport { Link } from 'react-router-dom';\nimport { Button } from 'antd';\n\nclass ServerError extends Component {\n    render() {\n        return (\n            <div className=\"server-error-page\">\n                <h1 className=\"server-error-title\">\n                    500\n                </h1>\n                <div className=\"server-error-desc\">\n                    Oops! Something went wrong at our Server. Why don't you go back?\n                </div>\n                <Link to=\"/\"><Button className=\"server-error-go-back-btn\" type=\"primary\" size=\"large\">Go Back</Button></Link>\n            </div>\n        );\n    }\n}\n\nexport default ServerError;","import React, { Component } from 'react';\nimport PollList from '../../poll/PollList';\nimport { getUserProfile } from '../../util/APIUtils';\nimport { Avatar, Tabs } from 'antd';\nimport { getAvatarColor } from '../../util/Colors';\nimport { formatDate } from '../../util/Helpers';\nimport LoadingIndicator  from '../../common/LoadingIndicator';\nimport './Profile.css';\nimport NotFound from '../../common/NotFound';\nimport ServerError from '../../common/ServerError';\n\nconst TabPane = Tabs.TabPane;\n\nclass Profile extends Component {\n\n    _isMounted = false;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            user: null,\n            isLoading: false\n        }\n        this.loadUserProfile = this.loadUserProfile.bind(this);\n    }\n\n    loadUserProfile(username) {\n        this.setState({\n            isLoading: true\n        });\n\n\n        getUserProfile(username)\n        .then(response => {\n            if(this._isMounted){\n                this.setState({\n                    user: response,\n                    isLoading: false\n                });\n            }\n        }).catch(error => {\n            if(error.status === 404) {\n                this.setState({\n                    notFound: true,\n                    isLoading: false\n                });\n            } else {\n                this.setState({\n                    serverError: true,\n                    isLoading: false\n                });        \n            }\n        });        \n    }\n      \n    componentDidMount() {\n        this._isMounted = true;\n        const username = this.props.match.params.username;\n        this.loadUserProfile(username);\n    }\n\n    componentDidUpdate(nextProps) {\n        if(this.props.match.params.username !== nextProps.match.params.username) {\n            this.loadUserProfile(nextProps.match.params.username);\n        }        \n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    render() {\n        if(this.state.isLoading) {\n            return <LoadingIndicator />;\n        }\n\n        if(this.state.notFound) {\n            return <NotFound />;\n        }\n\n        if(this.state.serverError) {\n            return <ServerError />;\n        }\n\n        const tabBarStyle = {\n            textAlign: 'center'\n        };\n\n        return (\n            <div className=\"profile\">\n                { \n                    this.state.user ? (\n                        <div className=\"user-profile\">\n                            <div className=\"user-details\">\n                                <div className=\"user-avatar\">\n                                    <Avatar className=\"user-avatar-circle\" style={{ backgroundColor: getAvatarColor(this.state.user.name)}}>\n                                        {this.state.user.name[0].toUpperCase()}\n                                    </Avatar>\n                                </div>\n                                <div className=\"user-summary\">\n                                    <div className=\"full-name\">{this.state.user.name}</div>\n                                    <div className=\"username\">@{this.state.user.username}</div>\n                                    <div className=\"user-joined\">\n                                        Joined {formatDate(this.state.user.joinedAt)}\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"user-poll-details\">    \n                                <Tabs defaultActiveKey=\"1\" \n                                    animated={false}\n                                    tabBarStyle={tabBarStyle}\n                                    size=\"large\"\n                                    className=\"profile-tabs\">\n                                    <TabPane tab={`${this.state.user.pollCount} Polls`} key=\"1\">\n                                        <PollList username={this.props.match.params.username} type=\"USER_CREATED_POLLS\" />\n                                    </TabPane>\n                                    <TabPane tab={`${this.state.user.voteCount} Votes`}  key=\"2\">\n                                        <PollList username={this.props.match.params.username} type=\"USER_VOTED_POLLS\" />\n                                    </TabPane>\n                                </Tabs>\n                            </div>  \n                        </div>  \n                    ): null               \n                }\n            </div>\n        );\n    }\n}\n\nexport default Profile;","import React, { Component } from 'react';\nimport {\n    Link,\n    withRouter\n} from 'react-router-dom';\nimport './AppHeader.css';\nimport pollIcon from '../poll.svg';\nimport { Layout, Menu, Dropdown, Icon } from 'antd';\n\nconst Header = Layout.Header;\n    \nclass AppHeader extends Component {\n    constructor(props) {\n        super(props);   \n        this.handleMenuClick = this.handleMenuClick.bind(this);   \n    }\n\n    handleMenuClick({ key }) {\n      if(key === \"logout\") {\n        this.props.onLogout();\n      }\n    }\n\n    render() {\n        let menuItems;\n        if(this.props.currentUser) {\n          menuItems = [\n            <Menu.Item key=\"/\">\n              <Link to=\"/\">\n                <Icon type=\"home\" className=\"nav-icon\" />\n              </Link>\n            </Menu.Item>,\n            <Menu.Item key=\"/poll/new\">\n            <Link to=\"/poll/new\">\n              <img src={pollIcon} alt=\"poll\" className=\"poll-icon\" />\n            </Link>\n          </Menu.Item>,\n          <Menu.Item key=\"/profile\" className=\"profile-menu\">\n                <ProfileDropdownMenu \n                  currentUser={this.props.currentUser} \n                  handleMenuClick={this.handleMenuClick}/>\n            </Menu.Item>\n          ]; \n        } else {\n          menuItems = [\n            <Menu.Item key=\"/login\">\n              <Link to=\"/login\">Login</Link>\n            </Menu.Item>,\n            <Menu.Item key=\"/signup\">\n              <Link to=\"/signup\">Signup</Link>\n            </Menu.Item>                  \n          ];\n        }\n\n        return (\n            <Header className=\"app-header\">\n            <div className=\"container\">\n              <div className=\"app-title\" >\n                <Link to=\"/\">PollsForYou</Link>\n              </div>\n              <Menu\n                className=\"app-menu\"\n                mode=\"horizontal\"\n                selectedKeys={[this.props.location.pathname]}\n                style={{ lineHeight: '64px' }} >\n                  {menuItems}\n              </Menu>\n            </div>\n          </Header>\n        );\n    }\n}\n\nfunction ProfileDropdownMenu(props) {\n  const dropdownMenu = (\n    <Menu onClick={props.handleMenuClick} className=\"profile-dropdown-menu\">\n      <Menu.Item key=\"user-info\" className=\"dropdown-item\" disabled>\n        <div className=\"user-full-name-info\">\n          {props.currentUser.name}\n        </div>\n        <div className=\"username-info\">\n          @{props.currentUser.username}\n        </div>\n      </Menu.Item>\n      <Menu.Divider />\n      <Menu.Item key=\"profile\" className=\"dropdown-item\">\n        <Link to={`/users/${props.currentUser.username}`}><Icon type= \"user\" />Profile</Link>\n      </Menu.Item>\n      <Menu.Item key=\"logout\" className=\"dropdown-item\">\n      <Icon type= \"logout\" />Logout\n      </Menu.Item>\n    </Menu>\n  );\n\n  return (\n    <Dropdown \n      overlay={dropdownMenu} \n      trigger={['click']}\n      getPopupContainer = { () => document.getElementsByClassName('profile-menu')[0]}>\n      <a className=\"ant-dropdown-link\">\n         <Icon type=\"user\" className=\"nav-icon\" style={{marginRight: 0}} /> <Icon type=\"down\" />\n      </a>\n    </Dropdown>\n  );\n}\n\n\nexport default withRouter(AppHeader);","import React from 'react';\nimport {\n    Route,\n    Redirect\n  } from \"react-router-dom\";\n  \n  \nconst PrivateRoute = ({ component: Component, authenticated, ...rest }) => (\n    <Route\n      {...rest}\n      render={props =>\n        authenticated ? (\n          <Component {...rest} {...props} />\n        ) : (\n          <Redirect\n            to={{\n              pathname: '/login',\n              state: { from: props.location }\n            }}\n          />\n        )\n      }\n    />\n);\n  \nexport default PrivateRoute;","import React, { Component } from 'react';\nimport { Icon } from 'antd';\n\nclass RouteNotFound extends Component {\n    render() {\n        \n        return (\n            <div style={{ paddingTop: '30px', paddingBottom: '30px', textAlign: 'center'}}>\n                <div style={{ textAlign: 'center' }}>\n                <Icon type=\"exclamation-circle\" style={{ fontSize: '30px'}}/>  \n                </div>\n                <h1>The route you requested is not accesssible!</h1>\n            </div>\n        );\n    }\n}\n\nexport default RouteNotFound;","import React, { Component } from 'react';\nimport './App.css';\nimport {\n  Route,\n  withRouter,\n  Switch\n} from 'react-router-dom';\n\nimport { getCurrentUser } from './util/APIUtils';\nimport { ACCESS_TOKEN } from './constants';\n\nimport PollList from './poll/PollList';\nimport NewPoll from './poll/NewPoll';\nimport Login from './user/login/Login';\nimport Signup from './user/signup/Signup';\nimport Profile from './user/profile/Profile';\nimport AppHeader from './common/AppHeader';\nimport NotFound from './common/NotFound';\nimport LoadingIndicator from './common/LoadingIndicator';\nimport PrivateRoute from './common/PrivateRoute';\n\nimport RouteNotFound from './extras/RouteNotFound';\n\nimport { Layout, notification } from 'antd';\nconst { Content } = Layout;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUser: null,\n      isAuthenticated: false,\n      isLoading: false\n    }\n    this.handleLogout = this.handleLogout.bind(this);\n    this.loadCurrentUser = this.loadCurrentUser.bind(this);\n    this.handleLogin = this.handleLogin.bind(this);\n\n    notification.config({\n      placement: 'topRight',\n      top: 70,\n      duration: 3,\n    });    \n  }\n\n  loadCurrentUser() {\n    this.setState({\n      isLoading: true\n    });\n    getCurrentUser()\n    .then(response => {\n      this.setState({\n        currentUser: response,\n        isAuthenticated: true,\n        isLoading: false\n      });\n    }).catch(error => {\n      this.setState({\n        isLoading: false\n      });  \n    });\n  }\n\n  componentDidMount() {\n    this.loadCurrentUser();\n  }\n\n  componentWillMount() {\n    \n  }\n\n  handleLogout(redirectTo=\"/\", notificationType=\"success\", description=\"You're successfully logged out.\") {\n    localStorage.removeItem(ACCESS_TOKEN);\n\n    this.setState({\n      currentUser: null,\n      isAuthenticated: false\n    });\n\n    this.props.history.push(redirectTo);\n    \n    notification[notificationType]({\n      message: 'Polling App',\n      description: description,\n    });\n  }\n\n  handleLogin() {\n    notification.success({\n      message: 'Polling App',\n      description: \"You're successfully logged in.\",\n    });\n    this.loadCurrentUser();\n    this.props.history.push(\"/\");\n  }\n\n  render() {\n    if(this.state.isLoading) {\n      return <LoadingIndicator />\n    }\n    return (\n        <Layout className=\"app-container\">\n          <AppHeader isAuthenticated={this.state.isAuthenticated} \n            currentUser={this.state.currentUser} \n            onLogout={this.handleLogout} />\n\n          <Content className=\"app-content\">\n            <div className=\"container\">\n              <Switch>      \n                <Route exact path=\"/\" \n                  render={(props) => <PollList isAuthenticated={this.state.isAuthenticated} \n                      currentUser={this.state.currentUser} handleLogout={this.handleLogout} {...props} />}>\n                </Route>\n                <Route path=\"/login\" \n                  render={\n                    (props) => \n                              this.state.isAuthenticated ? \n                              (<RouteNotFound />)\n                              :\n                              (<Login onLogin={this.handleLogin} {...props} />)\n                            } >\n                                      \n                                      \n                </Route>\n                <Route path=\"/signup\" render = {\n                  (props) => \n                        this.state.isAuthenticated ?\n                        (<RouteNotFound />)\n                        :\n                        (<Signup {...props}/>)\n                }></Route>\n                <Route path=\"/users/:username\" \n                  render={(props) => <Profile isAuthenticated={this.state.isAuthenticated} currentUser={this.state.currentUser} {...props}  />}>\n                </Route>\n                <PrivateRoute authenticated={this.state.isAuthenticated} path=\"/poll/new\" component={NewPoll} handleLogout={this.handleLogout}></PrivateRoute>\n                <Route component={NotFound}></Route>\n              </Switch>\n            </div>\n          </Content>\n        </Layout>\n    );\n  }\n}\n\nexport default withRouter(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>, \n    document.getElementById('root')\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}